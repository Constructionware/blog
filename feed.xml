<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://jhermann.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jhermann.github.io/blog/" rel="alternate" type="text/html" /><updated>2020-03-07T23:37:32-06:00</updated><id>https://jhermann.github.io/blog/feed.xml</id><title type="html">Snakes on Callisto</title><subtitle>Python · Jupyter(Hub) · DevSecOps · Software Architecture · Systems Design · Distributed Systems</subtitle><entry><title type="html">Installing CLI Tools Using ‘dephell’</title><link href="https://jhermann.github.io/blog/python/deployment/2020/03/03/install_tools_with_dephell.html" rel="alternate" type="text/html" title="Installing CLI Tools Using ‘dephell’" /><published>2020-03-03T00:00:00-06:00</published><updated>2020-03-03T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/python/deployment/2020/03/03/install_tools_with_dephell</id><content type="html" xml:base="https://jhermann.github.io/blog/python/deployment/2020/03/03/install_tools_with_dephell.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-03-03-install_tools_with_dephell.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/python/dephell-py-prj-mgmt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;Introduction&lt;a class=&quot;anchor-link&quot; href=&quot;#Introduction&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;‘dephell’ is a useful add-on tool for project and venv management that works with existing standard tooling, instead of doing a bad &lt;em&gt;replacement&lt;/em&gt; job like so many others. This post takes a look at how it can take over from &lt;code&gt;pipsi&lt;/code&gt; (Python Script Installer, which is unmaintained) to manage &lt;em&gt;isolated&lt;/em&gt; tool installations by providing each tool with its own virtual environment.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Installation&quot;&gt;Installation&lt;a class=&quot;anchor-link&quot; href=&quot;#Installation&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Dephell is installed via a Python installer script into its own venv (compatible to what &lt;code&gt;dephell&lt;/code&gt; itself creates as a so-called ‘jail’).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L dephell.org/install | python3

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;dephell&lt;/code&gt; needs at least Python 3.6, which is the default on Ubuntu Bionic, so it &lt;em&gt;just works&lt;/em&gt;™ there. On &lt;em&gt;Xenial&lt;/em&gt;, you need to install 3.6+ from the Deadsnakes PPA first, and pipe the installer script into e.g. &lt;code&gt;python3.8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The only locations touched by the installer on a Posix host are &lt;code&gt;~/.local/bin/&lt;/code&gt; and &lt;code&gt;~/.local/share/dephell/venvs/&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Going-into-&amp;#8216;jail&amp;#8217;&quot;&gt;Going into &amp;#8216;jail&amp;#8217;&lt;a class=&quot;anchor-link&quot; href=&quot;#Going-into-&amp;#8216;jail&amp;#8217;&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As already mentioned, this post will take a deeper look into the &lt;code&gt;dephell jail&lt;/code&gt; sub-command for venv management.&lt;/p&gt;
&lt;p&gt;Unlike &lt;code&gt;pipsi&lt;/code&gt;, the former go-to tool for that purpose, it is maintained, supports full life-cycle management (i.e. it has a way to remove tool installations), and also supports projects that have several console entry points (i.e. expose more than one command).&lt;/p&gt;
&lt;p&gt;I also like it a lot more than &lt;code&gt;pipx&lt;/code&gt;, which has a similar feature profile when compared to just dephell's &lt;code&gt;jail&lt;/code&gt; sub-command, but YMMV.&lt;/p&gt;
&lt;p&gt;As a first example, to get rid of &lt;code&gt;dephell&lt;/code&gt; again, just remove it using itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dephell jail remove dephell

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that doing so leaves anything installed via dephell untouched (i.e. other jails still work), and reinstalling allows to manage those again.&lt;/p&gt;
&lt;p&gt;Adding more tools is done using &lt;code&gt;jail install&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dephell jail install shiv
shiv --version

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure that &lt;code&gt;~/.local/bin&lt;/code&gt; is in your &lt;code&gt;PATH&lt;/code&gt;, which is not always the case on older GNU/Linux releases.&lt;/p&gt;
&lt;p&gt;You can easily list what you have installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dephell jail list
{
  &quot;dephell&quot;: [
    &quot;dephell&quot;
  ],
  &quot;shiv&quot;: [
    &quot;shiv-info&quot;,
    &quot;shiv&quot;
  ]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the output is JSON by default and lists all installed tools with their possibly multiple entry points. You can add the &lt;code&gt;--table&lt;/code&gt; option to get output more suited for humans.&lt;/p&gt;
&lt;p&gt;To see more details about a single venv, use &lt;code&gt;jail show&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dephell jail show dephell
{
  &quot;entrypoints&quot;: [
    &quot;dephell&quot;
  ],
  &quot;name&quot;: &quot;dephell&quot;,
  &quot;path&quot;: &quot;/home/jhe/.local/share/dephell/venvs/dephell&quot;,
  &quot;size&quot;: {
    &quot;lib&quot;: &quot;43.21Mb&quot;,
    &quot;total&quot;: &quot;56.78Mb&quot;
  },
  &quot;version&quot;: &quot;0.8.1&quot;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, there is a &lt;code&gt;jail try&lt;/code&gt; command to give new tools a quick spin in a &lt;em&gt;temporary&lt;/em&gt; environment, without leaving any trace of it on your machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dephell jail try --command &quot;pip --version&quot; pip
…
INFO running...
pip 20.0.2 from /tmp/tmpnm5gvieo/lib/python3.6/site-packages/pip (python 3.6)&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Beyond-&amp;#8216;jail&amp;#8217;&quot;&gt;Beyond &amp;#8216;jail&amp;#8217;&lt;a class=&quot;anchor-link&quot; href=&quot;#Beyond-&amp;#8216;jail&amp;#8217;&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Besides &lt;code&gt;jail&lt;/code&gt;, there are lots of other sub-commands for dependency management, handling docker images, creating common Python software project files, managing and vendoring your project's dependencies, and handling of project-specific venvs. See the full &lt;a href=&quot;https://dephell.readthedocs.io/&quot;&gt;DepHell documentation&lt;/a&gt; for details on that.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/dephell-py-prj-mgmt.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/dephell-py-prj-mgmt.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Enabling Easy Zipapp Installs on Windows</title><link href="https://jhermann.github.io/blog/python/deployment/2020/02/29/python_zippapps_on_windows.html" rel="alternate" type="text/html" title="Enabling Easy Zipapp Installs on Windows" /><published>2020-02-29T00:00:00-06:00</published><updated>2020-02-29T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/python/deployment/2020/02/29/python_zippapps_on_windows</id><content type="html" xml:base="https://jhermann.github.io/blog/python/deployment/2020/02/29/python_zippapps_on_windows.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-02-29-python_zippapps_on_windows.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/python/python+windows.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Zipapps-in-a-Nutshell&quot;&gt;Zipapps in a Nutshell&lt;a class=&quot;anchor-link&quot; href=&quot;#Zipapps-in-a-Nutshell&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Zipapps are a way to distribute Python applications
and all of their dependencies in a single binary file.
This is comparable to statically linked golang apps or Java's ‘executable JARs’. 
Their main advantage is that distributing and installing them is quite simple.&lt;/p&gt;
&lt;p&gt;Running Python code directly from ZIP archives is nothing new, &lt;a href=&quot;https://www.python.org/dev/peps/pep-0273/&quot;&gt;PEP 273&lt;/a&gt; made its debut in 2001, as part of Python 2.3 in the form of the &lt;code&gt;zipimport&lt;/code&gt; module.
&lt;a href=&quot;https://www.python.org/dev/peps/pep-0441/&quot;&gt;PEP 441&lt;/a&gt; builds on this and describes mechanisms to bundle full applications into a single ZIP file that can be made executable. It was approved in 2015 and a first implementation appeared in Python 3.5 via the &lt;code&gt;zipapp&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;See the PEP for details on how making a ZIP into an executable file works, but basically on POSIX systems the Python interpreter is called in a ‘bang path’ that is followed by the ZIP archive. The interpreter recognizes the ‘script’ is a whole application archive and acts accordingly. On Windows, zipapps &lt;em&gt;MUST&lt;/em&gt; carry the &lt;code&gt;.pyz&lt;/code&gt; extension which is bound to the &lt;code&gt;py&lt;/code&gt; wrapper command, which in turn looks at the bang path and calls a matching Python interpreter from the installed set.&lt;/p&gt;
&lt;p&gt;To display the bang path of a zipapp, use this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python3 -m zipapp --info foo.pyz

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to change the requested Python version to one that is actually installed or that you prefer, change the bang path as part of the installation process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python3 -m zipapp -p '/usr/bin/env python3.8' -o ~/bin/foo foo.pyz

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can also be done on an ad-hoc basis, by explicitly calling the desired interpreter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python3.8 foo.pyz …  # POSIX
py -3.8 foo.pyz …    # Windows

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well-known tools to build new zipapps, outside of the Python core, are &lt;a href=&quot;https://github.com/pantsbuild/pex&quot;&gt;pex&lt;/a&gt; (Twitter) and &lt;a href=&quot;https://github.com/linkedin/shiv&quot;&gt;shiv&lt;/a&gt; (LinkedIn). See their documentation for details on bundling your own applications.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Setting-Up-Windows-10-for-Zipapps&quot;&gt;Setting Up Windows 10 for Zipapps&lt;a class=&quot;anchor-link&quot; href=&quot;#Setting-Up-Windows-10-for-Zipapps&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;On Windows, because there is no ‘+x’ flag, things are a bit more complicated than on POSIX.
Zipapps &lt;strong&gt;MUST&lt;/strong&gt; have a &lt;code&gt;.pyz&lt;/code&gt; extension,
for which the &lt;code&gt;py&lt;/code&gt; launcher is registered as the default application.
The net effect is that such files become executable and are handed over to the launcher
&lt;em&gt;if&lt;/em&gt; you add a few environment settings to your machine.&lt;/p&gt;
&lt;p&gt;In the user-specific environment settings, add a new &lt;code&gt;PATHEXT&lt;/code&gt; variable
(or extend an existing one), with the value &lt;code&gt;%PATHEXT%;.PYZ&lt;/code&gt;.
Also edit the &lt;code&gt;PATH&lt;/code&gt; one and add a new &lt;code&gt;%LOCALAPPDATA%\bin&lt;/code&gt; entry.
Save everything (click “OK”), open a &lt;em&gt;new&lt;/em&gt; command window, and verify
the changes with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; echo %PATHEXT% &amp;amp; echo %PATH%

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the new bin directory by calling &lt;code&gt;md %LOCALAPPDATA%\bin&lt;/code&gt;.
Now you can place a zipapp file like &lt;code&gt;foo.pyz&lt;/code&gt; in that directory,
and it is immediately callable as &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get such a test subject, you can build 
&lt;a href=&quot;https://github.com/linkedin/shiv&quot;&gt;shiv&lt;/a&gt; with itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/linkedin/shiv.git
cd shiv
py -3 -m venv --prompt shiv venv
venv\Scripts\activate.bat
python -m pip install -e .
shiv -e shiv.cli:main -o %LOCALAPPDATA%\bin\shiv.pyz .
deactivate
shiv --version&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Variations&quot;&gt;Variations&lt;a class=&quot;anchor-link&quot; href=&quot;#Variations&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If that makes more sense to you, you can change the system-wide
variables instead of the user-specific ones, and choose paths that are
global for all users (like &lt;code&gt;C:\usr\bin&lt;/code&gt; or similar).&lt;/p&gt;
&lt;p&gt;To make zipapps available network-wide, you can use &lt;code&gt;%APPDATA%&lt;/code&gt; to store the zipapps,
so you only have to maintain them once in case you regularly
work on several machines in the same network. Just make sure the same version of Python is used everywhere then.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/python+windows.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/python+windows.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Shell Scripts: env-shebang with Arguments</title><link href="https://jhermann.github.io/blog/linux/know-how/2020/02/28/env_with_arguments.html" rel="alternate" type="text/html" title="Shell Scripts: env-shebang with Arguments" /><published>2020-02-28T00:00:00-06:00</published><updated>2020-02-28T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/linux/know-how/2020/02/28/env_with_arguments</id><content type="html" xml:base="https://jhermann.github.io/blog/linux/know-how/2020/02/28/env_with_arguments.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-02-28-env_with_arguments.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/linux/linux-shell.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;The-Problem&quot;&gt;The Problem&lt;a class=&quot;anchor-link&quot; href=&quot;#The-Problem&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There is an old annoyance that, if you use &lt;code&gt;env&lt;/code&gt; in a bang path to search the script interpreter in the shell's path, you cannot pass any arguments to it. Instead, all the text after the call to &lt;code&gt;env&lt;/code&gt; is passed as one single argument, and &lt;code&gt;env&lt;/code&gt; tries to find this as the executable to invoke, which fails of course when arguments are present.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;env&lt;/code&gt; is not the culprit here, but the very definition of how a bang path works (quoted from the &lt;code&gt;bash&lt;/code&gt; manpage):&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If  the  program  is a file beginning with &lt;code&gt;#!&lt;/code&gt;, the remainder of the first line specifies an interpreter for the program.
The shell executes the specified interpreter on operating systems that do not handle this executable format  themselves.
The  &lt;strong&gt;arguments to the interpreter consist of a &lt;em&gt;single&lt;/em&gt; optional argument&lt;/strong&gt; following the interpreter name on the first line…  &lt;em&gt;(emphasis mine)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So what env gets to see in its &lt;code&gt;argv&lt;/code&gt; array when you write something like &lt;code&gt;#! /usr/bin/env python3 -I -S&lt;/code&gt; is &lt;code&gt;['/usr/bin/env', 'python3 -I -S']&lt;/code&gt;. And there is no &lt;code&gt;python3 -I -S&lt;/code&gt; anywhere to be found that could interpret your script. 😞&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;The-Solution&quot;&gt;The Solution&lt;a class=&quot;anchor-link&quot; href=&quot;#The-Solution&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;env&lt;/code&gt; command in coreutils 8.30 solves this (i.e. Debian Buster only so far, Ubuntu Bionic still has 8.28). The relevant change is introducing a split option (&lt;code&gt;-S&lt;/code&gt;), designed to handle that special case of getting all arguments mushed together into one.&lt;/p&gt;
&lt;p&gt;In the example below, we want to pass the &lt;code&gt;-I -S&lt;/code&gt; options to Python on startup. They increase security of a script, by reducing the possible ways an attacker can insert their malicious code into your runtime environment, as you can see from the help text:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-I     : isolate Python from the user's environment (implies -E and -s)
-E     : ignore PYTHON* environment variables (such as PYTHONPATH)
-s     : don't add user site directory to sys.path; also PYTHONNOUSERSITE
-S     : don't imply 'import site' on initialization&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can try the following yourself using &lt;code&gt;docker run --rm -it --entrypoint /bin/bash python:3-slim-buster&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; cat &amp;gt;&amp;gt;isolated &amp;lt;&amp;lt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;!/usr/bin/env -S python3 -I -S
&lt;span class=&quot;go&quot;&gt;import sys&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;print(&amp;#39;\n&amp;#39;.join(sys.path))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; chmod +x isolated
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./isolated
&lt;span class=&quot;go&quot;&gt;/usr/local/lib/python38.zip&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;/usr/local/lib/python3.8&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;/usr/local/lib/python3.8/lib-dynload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Normally, the Python path would include both the current working directory (&lt;code&gt;/&lt;/code&gt; in this case) as well as site packages (&lt;code&gt;/usr/local/lib/python3.8/site-packages&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;However, we prevented their inclusion as a source of unanticipated code – and you can be a happy cat again. 😻&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/linux/linux-shell.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/linux/linux-shell.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Simplify Your Developer Life with `autoenv`</title><link href="https://jhermann.github.io/blog/tools/automation/2020/02/27/autoenv.html" rel="alternate" type="text/html" title="Simplify Your Developer Life with `autoenv`" /><published>2020-02-27T00:00:00-06:00</published><updated>2020-02-27T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/tools/automation/2020/02/27/autoenv</id><content type="html" xml:base="https://jhermann.github.io/blog/tools/automation/2020/02/27/autoenv.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-02-27-autoenv.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;When you work a lot with Python &lt;code&gt;venv&lt;/code&gt;s,
and thus have a lot of them sprinkled over your home directory,
then remembering to activate the right one can be a source of problems,
and is tedious at best.
But there is a solution to automate that chore
– that's what we have those boxes full of electronics for, after all.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Meet-autoenv&quot;&gt;Meet autoenv&lt;a class=&quot;anchor-link&quot; href=&quot;#Meet-autoenv&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Consider this shell session and especially watch what happens to the prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jhe@workstation:~$ which python
/usr/bin/python
jhe@workstation:~$ cd src/github/rituals/
(rituals)jhe@workstation:~/src/github/rituals$ which python
/home/jhe/src/github/rituals/.venv/rituals/bin/python&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/misc/mind-blown.gif&quot; alt=&quot;It&amp;#39;s Magic!&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The magic wand was originally crafted by Kenneth Reitz,
and can be found on &lt;a href=&quot;https://github.com/inishchith/autoenv&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Installing-autoenv&quot;&gt;Installing autoenv&lt;a class=&quot;anchor-link&quot; href=&quot;#Installing-autoenv&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To get a working installation, the easiest way is to directly use a git checkout as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/.local
test -d ~/.local/autoenv \
    || git clone &quot;https://github.com/kennethreitz/autoenv.git&quot; \
                 ~/.local/autoenv
echo &amp;gt;&amp;gt;~/.bash_aliases &quot;. ~/.local/autoenv/activate.sh&quot;
. ~/.local/autoenv/activate.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's all there is to it. Now you just have to add a &lt;code&gt;.env&lt;/code&gt; file to your project,
like in this &lt;a href=&quot;https://github.com/jhermann/rituals/blob/master/.env&quot;&gt;example&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Security-Considerations&quot;&gt;Security Considerations&lt;a class=&quot;anchor-link&quot; href=&quot;#Security-Considerations&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you're afraid that the &lt;code&gt;cd&lt;/code&gt; command is wrapped by a bash function,
the following shows that you need not fear,
since that function isn't exported to any scripts you run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(rituals)jhe@workstation:~/src/github/rituals$ bash &amp;lt;&amp;lt;&amp;lt;&quot;pwd; \
    cd $PWD/../time-tunnel; pwd; which python&quot;
/home/jhe/src/github/rituals
/home/jhe/src/github/time-tunnel
/home/jhe/src/github/rituals/.venv/rituals/bin/python&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This pretty much restricts the modified &lt;code&gt;cd&lt;/code&gt; to interactive use.
Sub-shells behave differently, again that's what you'd expect working at the prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(rituals)jhe@workstation:~/src/github/rituals$ ( pwd; \
    cd $PWD/../time-tunnel; pwd; which python )
/home/jhe/src/github/rituals
/home/jhe/src/github/time-tunnel
/home/jhe/src/github/time-tunnel/.venv/time-tunnel/bin/python&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If at any time you need the original command on the prompt, just use &lt;code&gt;command cd …&lt;/code&gt; or &lt;code&gt;builtin cd …&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, nobody can inject code into your shell just so, see what happens if we stumble over
a new or modified &lt;code&gt;.env&lt;/code&gt; file the first time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(rituals)jhe@workstation:~/src/github/rituals$ cd .
(rituals)jhe@workstation:~/src/github/rituals$ echo &amp;gt;&amp;gt;.env
(rituals)jhe@workstation:~/src/github/rituals$ cd .
autoenv:
autoenv: WARNING:
autoenv: This is the first time you are about to source /home/jhe/src/github/rituals/.env:
autoenv:
autoenv:     --- (begin contents) ---------------------------------------
autoenv:     # autoenv script (https://github.com/kennethreitz/autoenv)
autoenv:     test \! -f .venv/$(basename $(pwd))/bin/activate || . .venv/$(basename $(pwd))/bin/activate
autoenv:     
autoenv:
autoenv:     --- (end contents) -----------------------------------------
autoenv:
autoenv: Are you sure you want to allow this? (y/N) y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you have all the information to decide whether this is something you'd like to use or not.&lt;/p&gt;
&lt;p&gt;I do, but YMMV. 🤔&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/misc/mind-blown.gif" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/misc/mind-blown.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">(Dead) Snakes on a… Debian System</title><link href="https://jhermann.github.io/blog/python/deployment/2020/02/26/deadsnakes_on_debian.html" rel="alternate" type="text/html" title="(Dead) Snakes on a… Debian System" /><published>2020-02-26T00:00:00-06:00</published><updated>2020-02-26T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/python/deployment/2020/02/26/deadsnakes_on_debian</id><content type="html" xml:base="https://jhermann.github.io/blog/python/deployment/2020/02/26/deadsnakes_on_debian.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-02-26-deadsnakes_on_debian.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/python/python-on-debian.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/deadsnakes&quot;&gt;Deadsnakes PPA&lt;/a&gt; project originally built older Python releases for Ubuntu, so you could e.g. run unit tests on a new release using a Python version found on older releases (i.e. the ‘dead’ snakes).&lt;/p&gt;
&lt;p&gt;Nowadays, the project also builds &lt;em&gt;newer&lt;/em&gt; Python versions ahead of what a certain release offers as its default.&lt;/p&gt;
&lt;p&gt;The packages contain the minor Python version in their name (e.g. &lt;code&gt;python3.6&lt;/code&gt;) and can thus be installed concurrently to the default &lt;code&gt;python3&lt;/code&gt; ones. Originally based on the Debian source packages, they can also be used on Debian and not just on Ubuntu.&lt;/p&gt;
&lt;p&gt;The build script and Dockerfile &lt;a href=&quot;https://github.com/jhermann/ezpy/tree/master/deadsnakes#readme&quot;&gt;found here&lt;/a&gt; build packages for some Debian releases in their related Docker base images.&lt;/p&gt;
&lt;p&gt;Based on this, &lt;em&gt;Python 3.6&lt;/em&gt; can be installed for all of Stretch, Buster, and Xenial, as a set of the usual core Python packages (&lt;code&gt;python3.6&lt;/code&gt;, &lt;code&gt;python3.6-venv&lt;/code&gt;, &lt;code&gt;python3.6-dev&lt;/code&gt;, …). Note that Bionic comes with 3.6 as a default.&lt;/p&gt;
&lt;p&gt;The same goes for &lt;em&gt;Python 3.7&lt;/em&gt;, with Buster having it as a default.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Python 3.8&lt;/em&gt; is an add-on for all the (old-)stable releases (as of Feb 2020). Using this version makes the most sense to me, unless you have special needs forcing you to go to 3.7 or 3.6. Being an add-on everywhere ensures a similar experience regarding any quirks you encounter, and it is (right now) the newest stable version of Python. It also fits best what you get when using Docker's &lt;code&gt;python:3-slim&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/python-on-debian.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/python-on-debian.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Continuous Delivery Explained</title><link href="https://jhermann.github.io/blog/devops/continuous-delivery/2020/02/25/continuous-delivery.html" rel="alternate" type="text/html" title="Continuous Delivery Explained" /><published>2020-02-25T00:00:00-06:00</published><updated>2020-02-25T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/devops/continuous-delivery/2020/02/25/continuous-delivery</id><content type="html" xml:base="https://jhermann.github.io/blog/devops/continuous-delivery/2020/02/25/continuous-delivery.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-02-25-continuous-delivery.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/devops/feedback-cycle.png&quot; alt=&quot;DevOps Feedback Cycle&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;I wrote this back in September 2014 and never published it, but since it's an introductory piece it stands its ground, so let this serve as an initial post…&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;CD-in-a-Nutshell&quot;&gt;CD in a Nutshell&lt;a class=&quot;anchor-link&quot; href=&quot;#CD-in-a-Nutshell&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A typical mission statement for Continuous Delivery is this…&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Our highest priority is to satisfy the customer,&lt;/em&gt;
&lt;em&gt;through early and &lt;strong&gt;continuous delivery&lt;/strong&gt; of valuable software.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Continuous Delivery strives to improve the process of software delivery, by applying Continuous Deployment paired with automated testing and Continuous Integration. The goal is creating software developed to a high standard and easily packaged and deployed to test environments, resulting in the ability to rapidly, reliably and repeatedly push out enhancements and bug fixes to customers in small increments, at low risk and with minimal manual overhead.&lt;/p&gt;
&lt;p&gt;CD is effective because it facilitates an explorative approach by providing real, valuable measurements of the output of the process, and feeding those results back into the process. It's the next logical step after applying Agile principles to development, by expanding the scope to the whole software life-cycle and all involved parties, from inception to going live and then maintaining the product for a substantial amount of time in fast-paced iterations.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Some-More-Details&quot;&gt;Some More Details&lt;a class=&quot;anchor-link&quot; href=&quot;#Some-More-Details&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Continuous Delivery means that your software is production-ready from day one of your project (even when it's not “feature complete”), and that you can release to users on demand at the push of a button. There are several practices and patterns that enable this, but the foundation is formed in particular by excellent configuration management, continuous integration, and comprehensive automated testing at all levels. The key pattern is the deployment pipeline, which is effectively the extension of continuous integration out to production, whereby every check-in produces a release candidate which is assessed for its fitness to be released to production through a series of automated and then manual tests.&lt;/p&gt;
&lt;p&gt;In order to be able to perform these validations against every build, your regression tests must be automated — both at the unit and acceptance level. Humans then perform tasks such as exploratory testing, usability testing, and showcases as later validations against builds that have already passed the automated tests. Builds can be deployed automatically on demand to testing, staging and production environments by the people authorized to do so — note that this means deployments are triggered by humans and performed by machines.&lt;/p&gt;
&lt;p&gt;Through these practices, teams can get fast feedback on whether the software being delivered is useful, reduce the risk of release, and achieve a much more predictable, reliable process for software delivery. The backbone of CD is a culture in which everybody, if somehow involved in the delivery process, collaborates throughout the life-cycle of the product — developers, testers, infrastructure, operators, DBAs, managers, and customers alike.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Where-to-Go-From-Here?&quot;&gt;Where to Go From Here?&lt;a class=&quot;anchor-link&quot; href=&quot;#Where-to-Go-From-Here?&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Here are some resources for diving deeper into the topic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://continuousdelivery.com/about/&quot;&gt;Jez Humble's Blog · Continuous Delivery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cd.foundation/&quot;&gt;CD Foundation&lt;/a&gt; – A Neutral Home for the Next Generation of Continuous Delivery Collaboration.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itrevolution.com/devops-blog/&quot;&gt;IT Revolution DevOps Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.devopsweekly.com/&quot;&gt;Devops Weekly Mailing List&lt;/a&gt; (by &lt;a href=&quot;https://twitter.com/garethr&quot;&gt;@garethr&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://teamtopologies.com/&quot;&gt;Team Topologies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/devops/feedback-cycle.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/devops/feedback-cycle.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Talks &amp;amp; Presentations</title><link href="https://jhermann.github.io/blog/how-to/know-how/2020/02/22/talks+presentations.html" rel="alternate" type="text/html" title="Talks &amp; Presentations" /><published>2020-02-22T00:00:00-06:00</published><updated>2020-02-22T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/how-to/know-how/2020/02/22/talks+presentations</id><content type="html" xml:base="https://jhermann.github.io/blog/how-to/know-how/2020/02/22/talks+presentations.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-02-22-talks+presentations.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/misc/talks+presentations.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Slides&quot;&gt;Slides&lt;a class=&quot;anchor-link&quot; href=&quot;#Slides&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;On &lt;a href=&quot;https://speakerdeck.com/jhermann&quot;&gt;Speakerdeck&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/jhermann/jupyterhub-and-jupyter-notebook-a-view-under-the-hood&quot;&gt;JupyterHub and Jupyter Notebook – A View Under the Hood&lt;/a&gt; (PyData Südwest Meetup KA · 2018-04-24)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/jhermann/pydata-sudwest-meetup-ka-2018-06-13&quot;&gt;Document the Data – Creating Reports Using Docs Tooling&lt;/a&gt; (PyData Südwest Meetup KA · 2018-06-13)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/jhermann/devops-karlsruhe-meetup-2018-02-20&quot;&gt;DevOps Tool Bazaar – dh-virtualenv, fpm, sentry.io&lt;/a&gt; (DevOps Karlsruhe Meetup · 2018-02-20)&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Videos&quot;&gt;Videos&lt;a class=&quot;anchor-link&quot; href=&quot;#Videos&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/misc/talks+presentations.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/misc/talks+presentations.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A Guided Tour of My Projects</title><link href="https://jhermann.github.io/blog/misc/development/2020/02/21/projects_guided_tour.html" rel="alternate" type="text/html" title="A Guided Tour of My Projects" /><published>2020-02-21T00:00:00-06:00</published><updated>2020-02-21T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/misc/development/2020/02/21/projects_guided_tour</id><content type="html" xml:base="https://jhermann.github.io/blog/misc/development/2020/02/21/projects_guided_tour.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-02-21-projects_guided_tour.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;blockquote&gt;&lt;p&gt;🚧 &lt;em&gt;This article is work in progress, and will be updated regularly with new content.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/misc/ball_binary-geralt_pixabay-1280.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;For-Python-Developers&quot;&gt;For Python Developers&lt;a class=&quot;anchor-link&quot; href=&quot;#For-Python-Developers&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;https://github.com/Springerle&quot;&gt;Springerle&lt;/a&gt; GitHub organization is a collection of &lt;a href=&quot;https://github.com/cookiecutter&quot;&gt;cookiecutter project templates&lt;/a&gt;, with templates for single-file scripts (&lt;a href=&quot;https://github.com/Springerle/py-minimal-script&quot;&gt;py-minimal-script&lt;/a&gt;), fully equipped packages and applications (&lt;a href=&quot;https://github.com/Springerle/py-generic-project&quot;&gt;py-generic-project&lt;/a&gt;), Debian-packaging of existing projects (&lt;a href=&quot;https://github.com/Springerle/dh-virtualenv-mold&quot;&gt;dh-virtualenv-mold&lt;/a&gt; · &lt;a href=&quot;https://github.com/Springerle/debianized-pypi-mold&quot;&gt;debianized-pypi-mold&lt;/a&gt;), and more.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Debian-Packages&quot;&gt;Debian Packages&lt;a class=&quot;anchor-link&quot; href=&quot;#Debian-Packages&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I'm a contributor to &lt;a href=&quot;https://github.com/spotify/dh-virtualenv&quot;&gt;dh-virtualenv&lt;/a&gt;, and I use it for all my Debian packaging needs. Especially when it comes to deploying applications with lots of dependencies, or services needing tight integration with the host (i.e. systemd units). For pure command line tools, &lt;a href=&quot;https://github.com/pantsbuild/pex&quot;&gt;pex&lt;/a&gt; and &lt;a href=&quot;https://github.com/linkedin/shiv&quot;&gt;shiv&lt;/a&gt; can be a better alternative.&lt;/p&gt;
&lt;p&gt;There are several projects using &lt;em&gt;dh-virtualenv&lt;/em&gt; as the basic packaging tool:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/1and1/debianized-jupyterhub&quot;&gt;1and1/debianized-jupyterhub&lt;/a&gt; packages  JupyterHub, a multi-user server for Jupyter notebooks, It also comes with a Python3 kernel, populated with an extensive data science stack.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/1and1/debianized-sentry&quot;&gt;1and1/debianized-sentry&lt;/a&gt; puts all &lt;em&gt;sentry.io&lt;/em&gt; 9.x services into one package using systemd as a supervisor, you just need to add a PostgreSQL databasse.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jhermann/devpi-enterprisey/tree/master/debianized-devpi&quot;&gt;devpi-enterprisey/debianized-devpi&lt;/a&gt; allows easy deployment of the &lt;em&gt;devpi&lt;/em&gt; package repository and proxy. This doesn't get updated that often, it basically chugs along silently on my workstations, speeding up virtualenv creation and allowing off-line work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that these are typically &lt;a href=&quot;https://dockyard.readthedocs.io/en/latest/packaging-howto.html#dpkg-in-docker&quot;&gt;built in a Docker container&lt;/a&gt;. See the &lt;a href=&quot;https://jhermann.github.io/blog/misc/development/2020/02/21/projects_guided_tour.html#For-Python-Developers&quot;&gt;For Python Developers&lt;/a&gt; section on how to easily roll your own projects of this type.&lt;/p&gt;
&lt;p&gt;Also check out &lt;a href=&quot;https://jhermann.github.io/blog/python/deployment/2020/02/26/deadsnakes_on_debian.html&quot;&gt;(Dead) Snakes on a… Debian System&lt;/a&gt; for being able to install newer Python versions on all major Debian-like releases.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Miscellaneous&quot;&gt;Miscellaneous&lt;a class=&quot;anchor-link&quot; href=&quot;#Miscellaneous&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The README of &lt;a href=&quot;https://github.com/jhermann/awesome-python-talks&quot;&gt;awesome-python-talks&lt;/a&gt; is an opinionated list of videos related to Python, with a focus on training and gaining hands-on experience. The &lt;a href=&quot;https://github.com/1and1/awesome-tech-talks&quot;&gt;awesome-tech-talks&lt;/a&gt; repository is very similar, but about software development and general IT topics.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/misc/ball_binary-geralt_pixabay-1280.jpg" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/misc/ball_binary-geralt_pixabay-1280.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">fastpages: Pitfalls, Tips &amp;amp; Tricks</title><link href="https://jhermann.github.io/blog/how-to/fastpages/2020/02/20/fastpages-pitfalls.html" rel="alternate" type="text/html" title="fastpages: Pitfalls, Tips &amp; Tricks" /><published>2020-02-20T00:00:00-06:00</published><updated>2020-02-20T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/how-to/fastpages/2020/02/20/fastpages-pitfalls</id><content type="html" xml:base="https://jhermann.github.io/blog/how-to/fastpages/2020/02/20/fastpages-pitfalls.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-02-20-fastpages-pitfalls.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;blockquote&gt;&lt;p&gt;🆕 📝 &lt;em&gt;This article will be updated regularly with new information as it is discovered.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;Introduction&lt;a class=&quot;anchor-link&quot; href=&quot;#Introduction&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;fastpages&lt;/code&gt; will automatically convert &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt; Notebooks saved into the &lt;code&gt;_notebooks&lt;/code&gt; directory as blog posts!&lt;/p&gt;
&lt;p&gt;You must save your notebook with the naming convention &lt;code&gt;YYYY-MM-DD-*.ipynb&lt;/code&gt;. Otherwise the file's modification time is used, but that is not something you should rely on.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/fastai/fastpages#writing-blog-posts-with-jupyter&quot;&gt;Writing Blog Posts With Jupyter&lt;/a&gt; for more details on special markup features.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Things-to-Consider&quot;&gt;Things to Consider&lt;a class=&quot;anchor-link&quot; href=&quot;#Things-to-Consider&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Isolate the title, subtitle, and metadata into their own cell (the first one).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Always&lt;/strong&gt; quote your title and sub-title. Also quote any categories that are not purely alpha-numerical-with-hyphens.&lt;/li&gt;
&lt;li&gt;Add author information to your pages, so the Atom feed has it – &lt;a href=&quot;https://blog.sorryapp.com/blogging-with-jekyll/2014/02/06/adding-authors-to-your-jekyll-site.html&quot;&gt;Adding authors to your Jekyll site&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Categories are hierarchical and become part of the final URL – so give them a reasonable order (from generic to specific), have a consistent scheme for the site as a whole, and do not change them after publishing, otherwise you'll break people's links.&lt;/li&gt;
&lt;li&gt;For dual-use images (referenced in notebook contents &lt;em&gt;and&lt;/em&gt; metadata), place the image in the &lt;code&gt;_notebooks&lt;/code&gt; folder (or a sub-folder), use the relative path there in your notebook, and &lt;em&gt;prefix&lt;/em&gt; that path for the &lt;code&gt;image:&lt;/code&gt; attribute with &lt;code&gt;images/copied_from_nb/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Categories must be listed in a bracketed list – you cannot make it multi-line.&lt;/li&gt;
&lt;li&gt;Do not use today's date in filenames if you plan to publish soonish – timezone differences to the build machines will possibly make your article disappear from the generated index. &lt;em&gt;(fixed in template)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;This is a bit subjective, but I recommend to &lt;a href=&quot;https://github.com/1and1/debianized-jupyterhub#what-is-this&quot;&gt;get yourself a local installation of JupyterHub&lt;/a&gt; and use that exclusively as your “fastpages IDE” – that means just ignore plain markdown files and do everything with notebooks.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;How-Tos&quot;&gt;How-Tos&lt;a class=&quot;anchor-link&quot; href=&quot;#How-Tos&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Updating-the-fastpages-Template&quot;&gt;Updating the fastpages Template&lt;a class=&quot;anchor-link&quot; href=&quot;#Updating-the-fastpages-Template&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To get changes from upstream, check out your own copy of the template project.&lt;/p&gt;
&lt;p&gt;To catch up for the first time, find the &lt;code&gt;Initial commit&lt;/code&gt; in &lt;em&gt;your&lt;/em&gt; blog repository, then make sure there are no commits after the time of that commit in the template. If there are, find the last commit before that date (the last one you already have), and use its SHA for a range &lt;code&gt;«sha»..HEAD&lt;/code&gt; in the update procedure that follows, starting with the &lt;code&gt;git diff&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now to catch up, when you &lt;code&gt;git pull --ff-only&lt;/code&gt; in the template, there is a line starting with &lt;code&gt;Updating&lt;/code&gt; and a SHA range. Call &lt;code&gt;git diff «sha-range» &amp;gt;/tmp/fastpages.patch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Change to &lt;em&gt;your&lt;/em&gt; blog repository workdir (make sure you have a clean workdir with no pending changes) and apply that patch: &lt;code&gt;patch -N -p1 &amp;lt;/tmp/fastpages.patch&lt;/code&gt;. Look out for patch rejects and resolve any conflicts. Finally commit the template changes, ideally mentioning the SHA range in the commit message for record-keeping (&lt;a href=&quot;https://github.com/jhermann/blog/commit/051441e8020331ce29c9138633dc63ee275f2a84&quot;&gt;example&lt;/a&gt;).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Troubleshooting&quot;&gt;Troubleshooting&lt;a class=&quot;anchor-link&quot; href=&quot;#Troubleshooting&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Article-is-not-in-the-Index&quot;&gt;Article is not in the Index&lt;a class=&quot;anchor-link&quot; href=&quot;#Article-is-not-in-the-Index&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;See above hint regarding dates in the (near) future, and timezone differences between localhost and the cloud.&lt;/p&gt;
&lt;h3 id=&quot;Index-Entry-is-Missing-Most-Fields&quot;&gt;Index Entry is Missing Most Fields&lt;a class=&quot;anchor-link&quot; href=&quot;#Index-Entry-is-Missing-Most-Fields&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When an entry appears mostly empty, there is some metadata problem: missing quotes, improper YAML syntax, etc.&lt;/p&gt;
&lt;p&gt;Backtrack your changes in the git history, and never change metadata in bulk, so you can isolate the problem. And wait for a successful build after each change.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/logo.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>